#!/usr/bin/env bash

set -euo pipefail
shopt -s dotglob nullglob
trap 'echo "${0} line ${LINENO} Status: ${?}"' ERR

mkdir -p "$1" "$2"
BUILD_DIR=$(cd "$1/" && pwd)
CACHE_DIR=$(cd "$2/" && pwd)
ENV_DIR=$(cd "$3/" && pwd)

GO_IMPORT_PATH=github.com/fbsamples/fbrell
GO_VERSION=1.7
GO_URL=https://storage.googleapis.com/golang/go${GO_VERSION}.linux-amd64.tar.gz
OUTPUT_BIN=$BUILD_DIR/$(basename $GO_IMPORT_PATH)

export GOROOT=$CACHE_DIR/$GO_VERSION/go
export GOPATH=$CACHE_DIR/go
export PATH=$GOROOT/bin:$GOPATH/bin:$PATH

GO_PACKAGE_DIR=$GOPATH/src/$GO_IMPORT_PATH
GO_LDFLAGS="-X $GO_IMPORT_PATH/vendor/github.com/facebookgo/stack.gopath=$GOPATH"
GO_LDFLAGS="$GO_LDFLAGS -X $GO_IMPORT_PATH/rellenv/viewcontext.rev=$SOURCE_VERSION"

if test -d $GOROOT; then
  echo "-----> Using existing go $GO_VERSION"
  rm -rf $GOPATH/pkg
else
  rm -rf $CACHE_DIR/*
  mkdir -p $CACHE_DIR/$GO_VERSION
  cd $CACHE_DIR/$GO_VERSION
  echo -n "-----> Installing go ${GO_VERSION}..."
  curl -s $GO_URL | tar xz
  echo " done"
fi

echo -n "-----> Preparing files..."
rm -rf $GO_PACKAGE_DIR
mkdir -p $GO_PACKAGE_DIR
mv $BUILD_DIR/* $GO_PACKAGE_DIR/
mv $GO_PACKAGE_DIR/Procfile $BUILD_DIR/
mv $GO_PACKAGE_DIR/public $BUILD_DIR/public
mv $GO_PACKAGE_DIR/examples/db $BUILD_DIR/examples

openssl aes-256-cbc -d -a \
  -pass "pass:$(cat $ENV_DIR/RELL_SAVED_PASSWORD)" \
  -in $GO_PACKAGE_DIR/examples/saved.zip \
  -out $BUILD_DIR/saved.zip
unzip -q $BUILD_DIR/saved.zip -d $BUILD_DIR/examples/db
rm $BUILD_DIR/saved.zip

echo " done"

echo -n "-----> Building: go build $GO_IMPORT_PATH..."
go get $GO_IMPORT_PATH
go build "-ldflags=$GO_LDFLAGS" -o $OUTPUT_BIN $GO_IMPORT_PATH
echo " done"
